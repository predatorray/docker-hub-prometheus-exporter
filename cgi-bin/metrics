#!/usr/bin/env bash

# Copyright (c) 2020 Wenhao Ji <predator.ray@gmail.com>

# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -euf -o pipefail

readonly DEFAULT_DOCKER_HUB_V2_API_SERVER='https://hub.docker.com/v2'

exec 3>&1

function tmpfile() {
    local tmp_file
    tmp_file="$(mktemp)"
    trap "rm -f ${tmp_file}" EXIT
    echo "${tmp_file}"
}

function log() {
    echo >&2 "$@"
}

function error() {
    log '[ERROR]' "$@"
}

function check_required_env() {
    # check required env variables
    if [[ -z "${DOCKER_HUB_REPO:-}" ]]; then
        error "DOCKER_HUB_REPO is unset."
        exit 1
    fi
    export DOCKER_HUB_V2_API_SERVER="${DOCKER_HUB_V2_API_SERVER:-${DEFAULT_DOCKER_HUB_V2_API_SERVER}}"
}

function check_required_executables() {
    for exe in "$@"; do
        if ! hash "${exe}"; then
            error "command not found: ${exe}"
            exit 1
        fi
    done
}

function exposit_docker_hub_metrics() {
    local tmp_http_body="$(tmpfile)"

    SECONDS=0
    local request_path="/repositories/${DOCKER_HUB_REPO}/"
    local http_status
    http_status="$(curl -sL \
        -H "Accept: application/json" \
        -w "%{http_code}" -o "${tmp_http_body}" \
        "${DOCKER_HUB_V2_API_SERVER%/}${request_path}")"
    prom-exposit --name docker_hub_api_request_duration_seconds \
        --type gauge --comment 'Docker Hub API Request Duration (sec).' \
        --label repo="${DOCKER_HUB_REPO}" \
        --label path="${request_path}" \
        --value "${SECONDS}" >&3
    if [[ "${http_status}" != 2* ]]; then
        error "The Docker Hub API request '${request_path}' failed. (reason = ${http_status})"
        prom-exposit --name docker_hub_api_request_failure \
            --type gauge --comment 'Docker Hub API Request Failure.' \
            --label repo="${DOCKER_HUB_REPO}" \
            --label path="${request_path}" \
            --value 1 >&3
        return 0
    fi

    local pull_count="$(cat "${tmp_http_body}" | jq -rc '.pull_count // 0')"
    prom-exposit --name docker_hub_pulls \
        --type gauge --comment 'Docker Hub pull count.' \
        --label repo="${DOCKER_HUB_REPO}" \
        --value "${pull_count}" >&3

    local star_count="$(cat "${tmp_http_body}" | jq -rc '.star_count // 0')"
    prom-exposit --name docker_hub_stars \
        --type gauge --comment 'Docker Hub star count.' \
        --label repo="${DOCKER_HUB_REPO}" \
        --value "${star_count}" >&3

    rm -f "${tmp_http_body}"
}

function exposit_metrics() {
    check_required_executables jq curl prom-exposit
    check_required_env
    case "${REQUEST_METHOD:-GET}" in
        HEAD)
            echo 'Content-Type: text/plain; version=0.0.4'
            echo
            ;;
        GET)
            echo 'Content-Type: text/plain; version=0.0.4'
            echo
            exposit_docker_hub_metrics
            ;;
        *)
            echo 'Status: 405 Method Not Allowed'
            echo
            ;;
    esac
}

exposit_metrics
